/******************************************************************************
 * Name:        squarecreator.cpp
 * Purpose:     Supertile Self-assembly Simulator data creator: square
 * Author:      Yunhui Fu
 * Created:     2009-08-22
 * Modified by:
 * RCS-ID:      $Id: $
 * Copyright:   (c) 2009 Yunhui Fu
 * Licence:     GPL licence version 3
 ******************************************************************************/

#include <assert.h>
#include <getopt.h>
#include <math.h>
#include <stdlib.h> // atoi()
#include <stdio.h>

#define VERSION_MAJOR 0
#define VERSION_MINOR 1

#define XML_VERSION_MAJOR 0
#define XML_VERSION_MINOR 1

int
out_square_skeleton_temperature_1 (size_t n, size_t max_num_tiles, size_t temperature, const char *fname)
{
    char flg_norotate = 1;
    size_t steps_1year_min = 10;
    size_t steps_1year_max = 100;
    size_t year_current = 0;

    size_t i;
    //size_t num_gluevec;
    size_t sz_tilelist;
    size_t cnt;
    size_t times_square;
    FILE *fp_xml = NULL;

    if (n < 2) {
        fprintf (stderr, "the N(%d) should be > 1\n", n);
        return -1;
    }
    if (temperature < 1) {
        fprintf (stderr, "the temperture(%d) should be >= 1\n", temperature);
        return -1;
    }
    times_square = max_num_tiles / (n * n);
    if (times_square < 5) {
        times_square = 5;
    }
    fprintf (stderr, "the times of square of type Skeleton(%dX%d): %d\n", n, n, times_square);

    fp_xml = fopen (fname, "w");
    if (NULL == fp_xml) {
        return -1;
    }

    fprintf (fp_xml, "<?xml version='1.0' encoding='utf-8' ?>\n");
    fprintf (fp_xml, "<!-- Auto-generated by the square creator. -->\n");
    fprintf (fp_xml, "<tilesim>\n  <version>\n    <major>%d</major>\n    <minor>%d</minor>\n  </version>\n", XML_VERSION_MAJOR, XML_VERSION_MINOR);

    fprintf (fp_xml, "  <temperature>%d</temperature>\n", temperature);
    fprintf (fp_xml, "  <rotatable>%s</rotatable>\n", ((0 == flg_norotate)?"true":"false"));

    assert (((0 != steps_1year_max) && (steps_1year_max > steps_1year_min)) || (0 == steps_1year_max));
    fprintf (fp_xml, "  <simulationsetup>\n");
    fprintf (fp_xml, "    <currentyear>%d</currentyear>\n", year_current);
    fprintf (fp_xml, "    <stepsmin>%d</stepsmin>\n", steps_1year_min);
    fprintf (fp_xml, "    <stepsmax>%d</stepsmax>\n", steps_1year_max);
    fprintf (fp_xml, "  </simulationsetup>\n");

    // the glue of strenth 0
    i = 0;
    fprintf (fp_xml,
        "  <glue>\n"
        "    <id>%d</id>\n"
        "    <strength>%d</strength>\n"
        "  </glue>\n"
        , i, 0);
    i ++;
    // the glues in the square
    fprintf (fp_xml,
        "  <glue>\n"
        "    <id>%d</id>\n"
        "    <strength>%d</strength>\n"
        "  </glue>\n"
        , i, (temperature + 1) / 2);
    i ++;
    assert (i == 2);
    // the glues in the skeleton edges:
    for (; i < n + 1; i ++) {
        fprintf (fp_xml,
            "  <glue>\n"
            "    <id>%d</id>\n"
            /*"    <name>%d</name>\n"*/
            "    <strength>%d</strength>\n"
            "  </glue>\n"
            , i, temperature);
    }

    i = 0;
    // the tile in the square
    fprintf (fp_xml,
        "  <tile>\n"
        "    <id>%d</id>\n"
        "    <north>%d</north>\n"
        "    <east>%d</east>\n"
        "    <south>%d</south>\n"
        "    <west>%d</west>\n"
        "  </tile>\n"
        , i, 0, 0, 0, 0);
    i ++;
    // the tile in the corner of square (seed)
    fprintf (fp_xml,
        "  <tile>\n"
        "    <id>%d</id>\n"
        "    <north>%d</north>\n"
        "    <east>%d</east>\n"
        "    <south>%d</south>\n"
        "    <west>%d</west>\n"
        "  </tile>\n"
        , i, 0, 2, 2, 0);
    i ++;
    assert (i == 2);
    // the tiles in the skeleton edges: (dir: east)
    for (; i < n; i ++) {
        fprintf (fp_xml,
            "  <tile>\n"
            "    <id>%d</id>\n"
            "    <north>%d</north>\n"
            "    <east>%d</east>\n"
            "    <south>%d</south>\n"
            "    <west>%d</west>\n"
            "  </tile>\n"
            , i, 2, i + 1, 1, i);
    }
    fprintf (fp_xml,
        "  <tile>\n"
        "    <id>%d</id>\n"
        "    <north>%d</north>\n"
        "    <east>%d</east>\n"
        "    <south>%d</south>\n"
        "    <west>%d</west>\n"
        "  </tile>\n"
        , i, 0, 0, 1, i);
    i ++;
    assert (i == n + 1);
    // the tiles in the skeleton edges: (dir: south)
    for (; i < n + n - 1; i ++) {
        fprintf (fp_xml,
            "  <tile>\n"
            "    <id>%d</id>\n"
            "    <north>%d</north>\n"
            "    <east>%d</east>\n"
            "    <south>%d</south>\n"
            "    <west>%d</west>\n"
            "  </tile>\n"
            , i, i + 1 - n, 1, i + 2 - n, 0);
    }
    fprintf (fp_xml,
        "  <tile>\n"
        "    <id>%d</id>\n"
        "    <north>%d</north>\n"
        "    <east>%d</east>\n"
        "    <south>%d</south>\n"
        "    <west>%d</west>\n"
        "  </tile>\n"
        , i, i + 1 - n, 1, 0, 0);
    i ++;
    assert (i == n + n);
    sz_tilelist = i;

    for (i = 0; i < sz_tilelist; i ++) {
        if (i == 0) {
            cnt = 0;
        } else if ((i == 1) || (i <= n + 1)) {
            cnt = times_square;
        } else {
            cnt = n * times_square;
        }
        fprintf (fp_xml,
            "  <supertile>\n"
            "    <id>%d</id>\n"
            "    <quantity>%d</quantity>\n"
            "    <birth>%d</birth>\n"
            , i, cnt, 0);
        fprintf (fp_xml,
            "    <tileitem>\n"
            "      <id>%d</id>\n"
            "      <tileid>%d</tileid>\n"
            "      <rotnum>%d</rotnum>\n"
            "      <x>%d</x>\n"
            "      <y>%d</y>\n"
            "    </tileitem>\n"
            , 0, i, 0, 0, 0);
        fprintf (fp_xml, "  </supertile>\n");
    }
    fprintf (fp_xml, "  <targetsupertile>\n");
    for (i = 0; i < n * n; i ++) {
        size_t tileid;
        size_t x, y;
        y = n - (i / n) - 1;
        x = i % n;
        if (y == n - 1) {
            tileid = i + 1;
        } else if (x == 0) {
            tileid = n + n - y - 1;
        } else {
            tileid = 0;
        }
        fprintf (fp_xml,
            "    <tileitem>\n"
            "      <id>%d</id>\n"
            "      <tileid>%d</tileid>\n"
            "      <rotnum>%d</rotnum>\n"
            "      <x>%d</x>\n"
            "      <y>%d</y>\n"
            "    </tileitem>\n"
            , i, tileid, 0, x, y);
    }
    fprintf (fp_xml, "  </targetsupertile>\n");

    fprintf (fp_xml, "</tilesim>\n");
    fclose (fp_xml);
    return 0;
}

int
out_square_skeleton (size_t n, size_t max_num_tiles, size_t temperature, const char *fname)
{
    char flg_norotate = 1;
    size_t steps_1year_min = 10;
    size_t steps_1year_max = 100;
    size_t year_current = 0;

    size_t i;
    size_t idx;
    //size_t num_gluevec;
    size_t sz_tilelist;
    size_t cnt;
    size_t times_square;
    FILE *fp_xml = NULL;
    size_t tileid;
    size_t x, y;

    int glue_plane; // the glues between tiles in the edge plane
    int glue_edge_start;
    int tile_corner = -1;
    int tile_edge_start_x = -1;
    int tile_edge_start_y = -1;
    int tile_plane_middle_xy = -1;

    if (n < 2) {
        fprintf (stderr, "the N(%d) should be > 1\n", n);
        return -1;
    }
    if (temperature < 2) {
        fprintf (stderr, "the temperture(%d) should be > 1\n", temperature);
        return -1;
    }
    times_square = max_num_tiles / (n * n);
    if (times_square < 5) {
        times_square = 5;
    }
    fprintf (stderr, "the times of square of type Skeleton(%dX%d): %d\n", n, n, times_square);

    fp_xml = fopen (fname, "w");
    if (NULL == fp_xml) {
        return -1;
    }

    fprintf (fp_xml, "<?xml version='1.0' encoding='utf-8' ?>\n");
    fprintf (fp_xml, "<!-- Auto-generated by the square creator. -->\n");
    fprintf (fp_xml, "<tilesim>\n  <version>\n    <major>%d</major>\n    <minor>%d</minor>\n  </version>\n", XML_VERSION_MAJOR, XML_VERSION_MINOR);

    fprintf (fp_xml, "  <temperature>%d</temperature>\n", temperature);
    fprintf (fp_xml, "  <rotatable>%s</rotatable>\n", ((0 == flg_norotate)?"true":"false"));

    assert (((0 != steps_1year_max) && (steps_1year_max > steps_1year_min)) || (0 == steps_1year_max));
    fprintf (fp_xml, "  <simulationsetup>\n");
    fprintf (fp_xml, "    <currentyear>%d</currentyear>\n", year_current);
    fprintf (fp_xml, "    <stepsmin>%d</stepsmin>\n", steps_1year_min);
    fprintf (fp_xml, "    <stepsmax>%d</stepsmax>\n", steps_1year_max);
    fprintf (fp_xml, "  </simulationsetup>\n");

    // the glue of strenth 0
    idx = 0;
    fprintf (fp_xml,
        "  <glue>\n"
        "    <id>%d</id>\n"
        "    <strength>%d</strength>\n"
        "  </glue>\n"
        , idx, 0);
    idx ++;
    // the glues in the square
    glue_plane = idx;
    fprintf (fp_xml,
        "  <glue>\n"
        "    <id>%d</id>\n"
        "    <strength>%d</strength>\n"
        "  </glue>\n"
        , glue_plane, (temperature + 1) / 2);
    idx ++;
    // the glues in the skeleton edges:
    glue_edge_start = idx;
    for (i = 0; i < n - 1; i ++) {
        fprintf (fp_xml,
            "  <glue>\n"
            "    <id>%d</id>\n"
            /*"    <name>%d</name>\n"*/
            "    <strength>%d</strength>\n"
            "  </glue>\n"
            , glue_edge_start + i, temperature);
    }

    idx = 0;
    // the tile in the square
    tile_plane_middle_xy = idx;
    fprintf (fp_xml,
        "  <tile>\n"
        "    <id>%d</id>\n"
        "    <north>%d</north>\n"
        "    <east>%d</east>\n"
        "    <south>%d</south>\n"
        "    <west>%d</west>\n"
        "  </tile>\n"
        , idx, glue_plane, glue_plane, glue_plane, glue_plane);
    idx ++;
    // the tile in the corner of square
    tile_corner = idx;
    fprintf (fp_xml,
        "  <tile>\n"
        "    <id>%d</id>\n"
        "    <north>%d</north>\n"
        "    <east>%d</east>\n"
        "    <south>%d</south>\n"
        "    <west>%d</west>\n"
        "  </tile>\n"
        , idx, glue_edge_start, glue_edge_start, 0, 0);
    idx ++;
    assert (idx == 2);
    // the tiles in the skeleton edges: (dir: east)
    tile_edge_start_x = idx;
    for (i = 0; i < n - 2; i ++) {
        fprintf (fp_xml,
            "  <tile>\n"
            "    <id>%d</id>\n"
            "    <north>%d</north>\n"
            "    <east>%d</east>\n"
            "    <south>%d</south>\n"
            "    <west>%d</west>\n"
            "  </tile>\n"
            , idx + i, 1, glue_edge_start + i + 1, 0, glue_edge_start + i);
    }
    idx += i;
    fprintf (fp_xml,
        "  <tile>\n"
        "    <id>%d</id>\n"
        "    <north>%d</north>\n"
        "    <east>%d</east>\n"
        "    <south>%d</south>\n"
        "    <west>%d</west>\n"
        "  </tile>\n"
        , idx, 1, 0, 0, glue_edge_start + i);
    idx ++;
    assert (idx == n + 1);
    // the tiles in the skeleton edges: (dir: north)
    tile_edge_start_y = idx;
    for (i = 0; i < n - 2; i ++) {
        fprintf (fp_xml,
            "  <tile>\n"
            "    <id>%d</id>\n"
            "    <north>%d</north>\n"
            "    <east>%d</east>\n"
            "    <south>%d</south>\n"
            "    <west>%d</west>\n"
            "  </tile>\n"
            , idx + i, glue_edge_start + i + 1, 1, glue_edge_start + i, 0);
    }
    idx += i;
    fprintf (fp_xml,
        "  <tile>\n"
        "    <id>%d</id>\n"
        "    <north>%d</north>\n"
        "    <east>%d</east>\n"
        "    <south>%d</south>\n"
        "    <west>%d</west>\n"
        "  </tile>\n"
        , idx, 0, 1, glue_edge_start + i, 0);
    idx ++;
    assert (idx == n + n);
    sz_tilelist = idx;

    for (i = 0; i < sz_tilelist; i ++) {
        if (i == 0) {
            cnt = (n - 1) * (n - 1) * times_square;
        } else {
            cnt = times_square;
        }
        fprintf (fp_xml,
            "  <supertile>\n"
            "    <id>%d</id>\n"
            "    <quantity>%d</quantity>\n"
            "    <birth>%d</birth>\n"
            , i, cnt, 0);
        fprintf (fp_xml,
            "    <tileitem>\n"
            "      <id>%d</id>\n"
            "      <tileid>%d</tileid>\n"
            "      <rotnum>%d</rotnum>\n"
            "      <x>%d</x>\n"
            "      <y>%d</y>\n"
            "    </tileitem>\n"
            , 0, i, 0, 0, 0);
        fprintf (fp_xml, "  </supertile>\n");
    }
    fprintf (fp_xml, "  <targetsupertile>\n");

    assert (tile_corner >= 0);
    assert (tile_edge_start_x >= 0);
    assert (tile_edge_start_y >= 0);
    assert (tile_plane_middle_xy >= 0);
    i = 0;
    for (x = 0; x < n; x ++)
    for (y = 0; y < n; y ++) {
        if (x == 0) {
            if (y == 0) {
                tileid = tile_corner;
            } else {
                tileid = tile_edge_start_y + y - 1;
            }
        } else {
            if (y == 0) {
                tileid = tile_edge_start_x + x - 1;
            } else {
                tileid = tile_plane_middle_xy;
            }
        }
        fprintf (fp_xml,
            "    <tileitem>\n"
            "      <id>%d</id>\n"
            "      <tileid>%d</tileid>\n"
            "      <rotnum>%d</rotnum>\n"
            "      <x>%d</x>\n"
            "      <y>%d</y>\n"
            "    </tileitem>\n"
            , i, tileid, 0, x, y);
        i ++;
    }
    fprintf (fp_xml, "  </targetsupertile>\n");

    // test case
    fprintf (fp_xml, "  <testcases>\n");

    // corner + side
    fprintf (fp_xml, "    <testcaseitem>\n");
    fprintf (fp_xml, "      <supertileid_base>%d</supertileid_base>\n", tile_corner);
    fprintf (fp_xml,
        "      <supertileid_test>%d</supertileid_test>\n"
        "      <testposition>\n"
        "        <tileitem> <!-- the position of the test supertile -->\n"
        "          <rotnum>%d</rotnum>\n"
        "          <x>%d</x>\n"
        "          <y>%d</y>\n"
        "        </tileitem>\n"
        , tile_edge_start_x, 0, 1 + 1/*testmax.x*/, 0 + 1/*testmax.y*/);
    fprintf (fp_xml,
        "        <supertile>\n"
        "          <id>%d</id>\n"
        "          <quantity>%d</quantity>\n"
        "          <birth>%d</birth>\n"
        , 0, 1, 0);
    i = 0;
    fprintf (fp_xml,
        "          <tileitem>\n"
        "            <id>%d</id>\n"
        "            <tileid>%d</tileid>\n"
        "            <rotnum>%d</rotnum>\n"
        "            <x>%d</x>\n"
        "            <y>%d</y>\n"
        "          </tileitem>\n"
        , i, tile_corner, 0, 0, 0);
    i ++;
    fprintf (fp_xml,
        "          <tileitem>\n"
        "            <id>%d</id>\n"
        "            <tileid>%d</tileid>\n"
        "            <rotnum>%d</rotnum>\n"
        "            <x>%d</x>\n"
        "            <y>%d</y>\n"
        "          </tileitem>\n"
        , i, tile_edge_start_x, 0, 1, 0);
    i ++;
    fprintf (fp_xml, "        </supertile>\n");
    fprintf (fp_xml,
        "      </testposition>\n"
        "    </testcaseitem>\n"
        );

    // corner + side (north)
    fprintf (fp_xml, "    <testcaseitem>\n");
    fprintf (fp_xml, "      <supertileid_base>%d</supertileid_base>\n", tile_corner);
    fprintf (fp_xml,
        "      <supertileid_test>%d</supertileid_test>\n"
        "      <testposition>\n"
        "        <tileitem> <!-- the position of the test supertile -->\n"
        "          <rotnum>%d</rotnum>\n"
        "          <x>%d</x>\n"
        "          <y>%d</y>\n"
        "        </tileitem>\n"
        , tile_edge_start_y, 0, 0 + 1/*testmax.x*/, 1 + 1/*testmax.y*/);
    fprintf (fp_xml,
        "        <supertile>\n"
        "          <id>%d</id>\n"
        "          <quantity>%d</quantity>\n"
        "          <birth>%d</birth>\n"
        , 0, 1, 0);
    i = 0;
    fprintf (fp_xml,
        "          <tileitem>\n"
        "            <id>%d</id>\n"
        "            <tileid>%d</tileid>\n"
        "            <rotnum>%d</rotnum>\n"
        "            <x>%d</x>\n"
        "            <y>%d</y>\n"
        "          </tileitem>\n"
        , i, tile_corner, 0, 0, 0);
    i ++;
    fprintf (fp_xml,
        "          <tileitem>\n"
        "            <id>%d</id>\n"
        "            <tileid>%d</tileid>\n"
        "            <rotnum>%d</rotnum>\n"
        "            <x>%d</x>\n"
        "            <y>%d</y>\n"
        "          </tileitem>\n"
        , i, tile_edge_start_y, 0, 0, 1);
    i ++;
    fprintf (fp_xml, "        </supertile>\n");
    fprintf (fp_xml,
        "      </testposition>\n"
        "    </testcaseitem>\n"
        );

    // edge, two tiles, x arrow
    for (i = 0; i < n - 2; i ++) {
    fprintf (fp_xml, "    <testcaseitem>\n");
    fprintf (fp_xml, "      <supertileid_base>%d</supertileid_base>\n", tile_edge_start_x + i);
    fprintf (fp_xml,
        "      <supertileid_test>%d</supertileid_test>\n"
        "      <testposition>\n"
        "        <tileitem> <!-- the position of the test supertile -->\n"
        "          <rotnum>%d</rotnum>\n"
        "          <x>%d</x>\n"
        "          <y>%d</y>\n"
        "        </tileitem>\n"
        , tile_edge_start_x + i + 1, 0, 1 + 1/*testmax.x*/, 0 + 1/*testmax.y*/);
    fprintf (fp_xml,
        "        <supertile>\n"
        "          <id>%d</id>\n"
        "          <quantity>%d</quantity>\n"
        "          <birth>%d</birth>\n"
        , 0, 1, 0);
    idx = 0;
    fprintf (fp_xml,
        "          <tileitem>\n"
        "            <id>%d</id>\n"
        "            <tileid>%d</tileid>\n"
        "            <rotnum>%d</rotnum>\n"
        "            <x>%d</x>\n"
        "            <y>%d</y>\n"
        "          </tileitem>\n"
        , idx, tile_edge_start_x + i, 0, 0, 0);
    idx ++;
    fprintf (fp_xml,
        "          <tileitem>\n"
        "            <id>%d</id>\n"
        "            <tileid>%d</tileid>\n"
        "            <rotnum>%d</rotnum>\n"
        "            <x>%d</x>\n"
        "            <y>%d</y>\n"
        "          </tileitem>\n"
        , idx, tile_edge_start_x + i + 1, 0, 1, 0);
    idx ++;
    fprintf (fp_xml, "        </supertile>\n");
    fprintf (fp_xml,
        "      </testposition>\n"
        "    </testcaseitem>\n"
        );
    }

    // edge, two tiles, y arrow
    for (i = 0; i < n - 2; i ++) {
    fprintf (fp_xml, "    <testcaseitem>\n");
    fprintf (fp_xml, "      <supertileid_base>%d</supertileid_base>\n", tile_edge_start_y + i);
    fprintf (fp_xml,
        "      <supertileid_test>%d</supertileid_test>\n"
        "      <testposition>\n"
        "        <tileitem> <!-- the position of the test supertile -->\n"
        "          <rotnum>%d</rotnum>\n"
        "          <x>%d</x>\n"
        "          <y>%d</y>\n"
        "        </tileitem>\n"
        , tile_edge_start_y + i + 1, 0, 0 + 1/*testmax.x*/, 1 + 1/*testmax.y*/);
    fprintf (fp_xml,
        "        <supertile>\n"
        "          <id>%d</id>\n"
        "          <quantity>%d</quantity>\n"
        "          <birth>%d</birth>\n"
        , 0, 1, 0);
    idx = 0;
    fprintf (fp_xml,
        "          <tileitem>\n"
        "            <id>%d</id>\n"
        "            <tileid>%d</tileid>\n"
        "            <rotnum>%d</rotnum>\n"
        "            <x>%d</x>\n"
        "            <y>%d</y>\n"
        "          </tileitem>\n"
        , idx, tile_edge_start_y + i, 0, 0, 0);
    idx ++;
    fprintf (fp_xml,
        "          <tileitem>\n"
        "            <id>%d</id>\n"
        "            <tileid>%d</tileid>\n"
        "            <rotnum>%d</rotnum>\n"
        "            <x>%d</x>\n"
        "            <y>%d</y>\n"
        "          </tileitem>\n"
        , idx, tile_edge_start_y + i + 1, 0, 0, 1);
    idx ++;
    fprintf (fp_xml, "        </supertile>\n");
    fprintf (fp_xml,
        "      </testposition>\n"
        "    </testcaseitem>\n"
        );
    }

    fprintf (fp_xml, "  </testcases>\n");

    fprintf (fp_xml, "</tilesim>\n");
    fclose (fp_xml);
    return 0;
}

int
out_square_nxn (size_t n, size_t max_num_tiles, size_t temperature, const char *fname)
{
    char flg_norotate = 1;
    size_t steps_1year_min = 10;
    size_t steps_1year_max = 100;
    size_t year_current = 0;

    size_t i;
    size_t j;
    size_t idx;
    size_t gn; // glue of the north
    size_t ge; // glue of the east
    size_t gs; // glue of the south
    size_t gw; // glue of the west
    //size_t num_gluevec;
    size_t sz_tilelist;
    size_t cnt;
    size_t times_square;
    FILE *fp_xml = NULL;

    if (n < 2) {
        fprintf (stderr, "the N(%d) should be > 1\n", n);
        return -1;
    }
    if (temperature < 2) {
        fprintf (stderr, "the temperture(%d) should be > 1\n", temperature);
        return -1;
    }

    times_square = max_num_tiles / (n * n);
    if (times_square < 5) {
        times_square = 5;
    }
    fprintf (stderr, "the times of square of type NxN(%dX%d): %d\n", n, n, times_square);

    fp_xml = fopen (fname, "w");
    if (NULL == fp_xml) {
        return -1;
    }

    fprintf (fp_xml, "<?xml version='1.0' encoding='utf-8' ?>\n");
    fprintf (fp_xml, "<!-- Auto-generated by the square creator. -->\n");
    fprintf (fp_xml, "<tilesim>\n  <version>\n    <major>%d</major>\n    <minor>%d</minor>\n  </version>\n", XML_VERSION_MAJOR, XML_VERSION_MINOR);

    fprintf (fp_xml, "  <temperature>%d</temperature>\n", temperature);
    fprintf (fp_xml, "  <rotatable>%s</rotatable>\n", ((0 == flg_norotate)?"true":"false"));

    assert (((0 != steps_1year_max) && (steps_1year_max > steps_1year_min)) || (0 == steps_1year_max));
    fprintf (fp_xml, "  <simulationsetup>\n");
    fprintf (fp_xml, "    <currentyear>%d</currentyear>\n", year_current);
    fprintf (fp_xml, "    <stepsmin>%d</stepsmin>\n", steps_1year_min);
    fprintf (fp_xml, "    <stepsmax>%d</stepsmax>\n", steps_1year_max);
    fprintf (fp_xml, "  </simulationsetup>\n");

    // the glue of strenth 0
    idx = 0;
    fprintf (fp_xml,
        "  <glue>\n"
        "    <id>%d</id>\n"
        "    <strength>%d</strength>\n"
        "  </glue>\n"
        , idx, 0);
    idx ++;
    cnt = temperature;
    // the glues of the tile: dir horizontal
    for (i = 0; i < n * (n - 1); i ++, idx ++) {
#if 0
        if (i % n == 0) {
            cnt = temperature;
        } else {
            cnt = temperature - 1;
        }
#endif
        fprintf (fp_xml,
            "  <glue>\n"
            "    <id>%d</id>\n"
            /*"    <name>%d</name>\n"*/
            "    <strength>%d</strength>\n"
            "  </glue>\n"
            , idx, cnt);
    }
    cnt = temperature;
    // the glues of the tile: dir vertical
    for (i = 0; i < n * (n - 1); i ++, idx ++) {
#if 0
        if (i % n == 0) {
            cnt = temperature;
        } else {
            cnt = temperature - 1;
        }
#endif
        fprintf (fp_xml,
            "  <glue>\n"
            "    <id>%d</id>\n"
            /*"    <name>%d</name>\n"*/
            "    <strength>%d</strength>\n"
            "  </glue>\n"
            , idx, cnt);
    }

    idx = 0;
    for (i = 0; i < n; i ++) {
        for (j = 0; j < n; j ++) {
            if (i < 1) {
                assert (i == 0);
                gn = 0;
            } else {
                gn = (i - 1) * n + j + /*start*/1;
            }
            if (j + 2 > n) {
                assert (j == n - 1);
                ge = 0;
            } else {
                ge = j * n + i + /*start*/(n * (n - 1) + 1);
            }
            if (i + 2 > n) {
                assert (i == n - 1);
                gs = 0;
            } else {
                gs = i * n + j + /*start*/1;
            }
            if (j < 1) {
                assert (j == 0);
                gw = 0;
            } else {
                gw = (j - 1) * n + i + /*start*/(n * (n - 1) + 1);
            }

            fprintf (fp_xml,
                "  <tile>\n"
                "    <id>%d</id>\n"
                "    <north>%d</north>\n"
                "    <east>%d</east>\n"
                "    <south>%d</south>\n"
                "    <west>%d</west>\n"
                "  </tile>\n"
                , idx, gn, ge, gs, gw);
            idx ++;
        }
    }
    assert (idx == n * n);
    sz_tilelist = idx;

    cnt = times_square;
    for (i = 0; i < sz_tilelist; i ++) {
        fprintf (fp_xml,
            "  <supertile>\n"
            "    <id>%d</id>\n"
            "    <quantity>%d</quantity>\n"
            "    <birth>%d</birth>\n"
            , i, cnt, 0);
        fprintf (fp_xml,
            "    <tileitem>\n"
            "      <id>%d</id>\n"
            "      <tileid>%d</tileid>\n"
            "      <rotnum>%d</rotnum>\n"
            "      <x>%d</x>\n"
            "      <y>%d</y>\n"
            "    </tileitem>\n"
            , 0, i, 0, 0, 0);
        fprintf (fp_xml, "  </supertile>\n");
    }

    fprintf (fp_xml, "  <targetsupertile>\n");
    for (i = 0; i < n * n; i ++) {
        int tileid;
        int x, y;
        y = n - (i / n) - 1;
        x = i % n;
        tileid = i;
        fprintf (fp_xml,
            "    <tileitem>\n"
            "      <id>%d</id>\n"
            "      <tileid>%d</tileid>\n"
            "      <rotnum>%d</rotnum>\n"
            "      <x>%d</x>\n"
            "      <y>%d</y>\n"
            "    </tileitem>\n"
            , i, tileid, 0, x, y);
    }
    fprintf (fp_xml, "  </targetsupertile>\n");

    fprintf (fp_xml, "</tilesim>\n");
    fclose (fp_xml);
    return 0;
}

static void
version (FILE *out_stream)
{
    fprintf( out_stream, "Square (2D) Creator for SSS version %d.%d\n", VERSION_MAJOR, VERSION_MINOR);
    fprintf( out_stream, "Copyright 2009 Yunhui Fu (yhfudev@gmail.com)\n\n" );
}

static void
help (FILE *out_stream, const char *progname)
{
    static const char *help_msg[] = {
        "Command line version of Square (2D) Creator for Supertile Simulation System", 
        "",
        "-n --squaresize  <size>    specify the square size",
        "-a --maxtiles  <size>      specify the maxium number of tiles",
        "-m --multiple  <multiple>  specify the number of target supertiles",
        "-t --temperature <temperature> replace the temperature of the system",
        "-o --outprefix <prefix>    specify the prefix of the output xml file",

        "-V --version               display version information",
        "   --help                  display this help",
        "-v --verbose               be verbose",
        0 };
   const char **p = help_msg;

   fprintf (out_stream, "Usage: %s [options]\n", progname);
   while (*p) fprintf (out_stream, "%s\n", *p++);
}

int
main (int argc, char *argv[])
{
    const char *fn_out = "testsquare";
    char fname[300];
    size_t n = 0;
    size_t sz_max_tiles = 0;
    size_t multiple = 0;
    size_t temperature = 2;
    int c;
    struct option longopts[]  = {
        { "squaresize", 1, 0, 'n' },
        { "maxtiles",   1, 0, 'a' },
        { "multiple",   1, 0, 'm' },
        { "temperature",1, 0, 't' },
        { "outprefix",  1, 0, 'o' },
        { "version",    0, 0, 'V' },
        { "help",       0, 0, 501 },
        { "verbose",    0, 0, 'v' },
        { 0,            0, 0,  0  },
    };
    while ((c = getopt_long( argc, argv, "n:m:t:o:a:VLv", longopts, NULL )) != EOF) {
        switch (c) {
        case 'n': n = atoi (optarg); break;
        case 'a': sz_max_tiles = atoi (optarg); break;
        case 'm': multiple = atoi (optarg); break;
        case 'o': fn_out = optarg; break;
        case 't': temperature = atoi (optarg); break;
        case 'V': version (stdout); exit(1); break;
        case 'v': break;
        default:
        case 501: help (stdout, argv[0]); exit(1); break;
        }
    }
    if (optind == argc) {
        if (0 == n) {
            version (stderr);
            fprintf (stderr, "Use --help for help\n" );
            exit(1);
        }
    }
    if ((sz_max_tiles != 0) && (multiple != 0)) {
        version (stderr);
        fprintf (stderr, "Please specify --maxtiles or --multiple only once.\n" );
        exit(1);
    }
    if ((sz_max_tiles == 0) && (multiple == 0)) {
        multiple = 100;
    }
    if (sz_max_tiles == 0) {
        assert (multiple > 0);
        sz_max_tiles = multiple * n * n;
    }
    sprintf (fname, "%s_nxn.xml", fn_out);
    if (out_square_nxn (n, sz_max_tiles, temperature, fname) < 0) {
        return 1;
    }
    sprintf (fname, "%s_skeleton.xml", fn_out);
    if (out_square_skeleton (n, sz_max_tiles, temperature, fname) < 0) {
        return 1;
    }
    sprintf (fname, "%s_skeleton_temp1.xml", fn_out);
    if (out_square_skeleton_temperature_1 (n, sz_max_tiles, temperature, fname) < 0) {
        return 1;
    }
    return 0;
}
